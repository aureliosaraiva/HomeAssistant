# - platform: mqtt
#   name: Zigbee2mqtt Networkmap
#   state_topic: zigbee2mqtt/bridge/networkmap/raw
#   value_template: >-
#     {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
#   json_attributes_topic: zigbee2mqtt/bridge/networkmap/raw

#https://home-assistant.io/components/sensor.systemmonitor/
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_use_percent
    - type: processor_use
    - type: last_boot

#https://www.home-assistant.io/components/sensor.command_line/
- platform: command_line
  name: CPU Temperature
  command: "cat /sys/class/thermal/thermal_zone2/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(1) }}'

#https://www.home-assistant.io/integrations/uptime/
- platform: uptime
  name: Time Online
  unit_of_measurement: hours
- platform: mqtt
  name: Bridge state
  state_topic: "zigbee2mqtt/bridge/state"
  icon: mdi:router-wireless
# - platform: sql
#     queries:
#       - name: Total de entidades
#         query: "select count(distinct entity_id) as total from states"
#         column: 'total'
- platform: template
  sensors:
    tv_living_room_movie:
      friendly_name: Modo Filme
      entity_id: media_player.amazon_fire_tv
      value_template: >
        {% if states.media_player.amazon_fire_tv.attributes.app_name in ['Netflix', 'com.amazon.amazonvideo.livingroom.firetv'] %}
        on
        {% else %}
        off
        {% endif %}

    tv_living_room:
      entity_id: media_player.amazon_fire_tv
      friendly_name: 'Televisão da sala'
      value_template: >
        {%- if is_state('media_player.amazon_fire_tv', 'off') or is_state('media_player.cast_living_room', 'unavailable') -%}
        off
        {% else %}
        on
        {% endif %}
      icon_template: >-
          {%- if is_state('media_player.amazon_fire_tv', 'off') or is_state('media_player.cast_living_room', 'unavailable') -%}
            mdi:television-classic-off
          {% else %}
            mdi:television-classic
          {% endif %}

    sensor_count:
      entity_id: []
      friendly_name: 'Número de Sensores'
      value_template: '{{ states.sensor | count }}'

    automation_count:
      entity_id: []
      friendly_name: 'Número de Automações'
      value_template: '{{ states.automation | count }}'

    script_count:
      entity_id: []
      friendly_name: 'Número de Scripts'
      value_template: '{{ states.script | count }}'

    switch_count:
      entity_id: []
      friendly_name: 'Número de Switches'
      value_template: '{{ states.switch | count }}'

    binary_sensor_count:
      entity_id: []
      friendly_name: 'Número de Sensor Binário'
      value_template: '{{ states.binary_sensor | count }}'

    lights_count:
      entity_id: []
      friendly_name: 'Número de Luzes'
      value_template: '{{ states.light | count }}'

    tracker_count:
      entity_id: []
      friendly_name: 'Número de Devices'
      value_template: '{{ states.device_tracker | count }}'

    zwave_count:
      entity_id: []
      friendly_name: 'Zwave Devices'
      value_template: '{{ states.zwave_count | count }}'

    camera_count:
      entity_id: []
      friendly_name: 'Zwave Devices'
      value_template: '{{ states.camera | count }}'

    media_player_count:
      entity_id: []
      friendly_name: 'Multimidia'
      value_template: '{{ states.media_player | count }}'

    presence_home:
      friendly_name: Tem alguém em casa
      entity_id:
        - binary_sensor.aurelio_saraiva_s_galaxy_a8_2018_presence
        - binary_sensor.camila_medrosa_ferreira_s_galaxy_s9_presence
      value_template: >-
        {% if is_state('binary_sensor.camila_medrosa_ferreira_s_galaxy_s9_presence', 'on')
           or is_state('binary_sensor.aurelio_saraiva_s_galaxy_a8_2018_presence', 'on') %}
           Sim
        {% else %}
           Não
        {% endif %}
    external_temperature:
      friendly_name: "Temperatura externa"
      unit_of_measurement: "°C"
      value_template: >-
        {{ ((float(states.sensor.motion_garden_temperature.state) + float(states.sensor.motion_external_door_temperature.state)) / 2) | round(2) }}

    first_floor_temperature:
      friendly_name: "Temperatura do 2 andar"
      unit_of_measurement: "°C"
      value_template: >-
        {{ (float(states.sensor.temperature_bedroom_temperature.state)) | round(2) }}

- platform: moon
