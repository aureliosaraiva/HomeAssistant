substitutions:
  hostname: "bed_occupancy"
  ssid_ap: "bed_occupancy"
  versao: "1.0"

esphome:
  name: bed_occupancy
  platform: ESP8266
  board: nodemcuv2
  esp8266_restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  ap:
    ssid: "$ssid_ap"
    password: !secret AP_mode_pass

# mqtt:
  # broker: 192.168.68.109

captive_portal:


logger:
  baud_rate: 0

# Enable Home Assistant API//
api:

ota:
  password: !secret ota_pass

time:
  - platform: sntp
    id: my_time

i2c:
  sda: D1
  scl: D2
  scan: True

ads1115:
  - address: 0x48

sensor:
  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144
    id: bed_right
    update_interval: 2s
    accuracy_decimals: 5
    name: "$hostname volt right"
    filters:
      - multiply: 1.2
      - lambda: |-
          if (!isnan(x) && x>0) {
            return x;
          } else {
            return 0;
          }

  - platform: ads1115
    multiplexer: 'A3_GND'
    gain: 6.144
    id: bed_left
    update_interval: 2s
    accuracy_decimals: 5
    name: "$hostname volt left"
    filters:
      - multiply: 1.2
      - lambda: |-
          if (!isnan(x) && x>0) {
            return x;
          } else {
            return 0;
          }

binary_sensor:
  - platform: template
    name: "$hostname right"
    filters:
      - delayed_on: 4s
      - delayed_off: 4s
    lambda: |-
      if (!isnan(id(bed_right).state) && (id(bed_right).state) && id(bed_right).state > 0.001) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "$hostname left"
    filters:
      - delayed_on: 4s
      - delayed_off: 4s
    lambda: |-
      if (!isnan(id(bed_left).state) && (id(bed_left).state) && id(bed_left).state > 0.001) {
        return true;
      } else {
        return false;
      }
